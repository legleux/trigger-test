name: Trigger CI repo
on: [pull_request, push]
jobs:
  dispatch_build_event:
    name: Trigger CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Send build repository_dispatch event to trigger-ci
        run: |
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H 'Accept: application/vnd.github.v3+json' \
              "https://api.github.com/repos/legleux/trigger-ci/dispatches" \
              -d '{"event_type": "build", "client_payload": {"SHA": "${{ github.sha }}"}}'

      # - name: trigger ci
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       await github.rest.actions.createDispatchEvent({
      #         owner: 'legleux',
      #         repo: 'trigger-ci',
      #         workflow_id: 'ci.yml',
      #         event_type: 'build',
      #         client_payload: {"SHA": "${{ github.sha }}"}
      #       })

      # - name: Get result
      #   run: |
      #     echo https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}

      - name: Wait on result
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          INPUT_OWNER: legleux
          INPUT_REPO: trigger-ci
          INPUT_WORKFLOW_FILE_NAME: "ci.yml"
        run: |
          # Find the id of the last build
          last_workflow=$(curl -X GET "https://api.github.com/repos/$INPUT_OWNER/$INPUT_REPO/actions/workflows/$INPUT_WORKFLOW_FILE_NAME/runs?event=repository_dispatch&status=queued" \
            -H 'Accept: application/vnd.github.v3+json' \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" | jq .[] ) #'[.workflow_runs[]] | first')
          echo $last_workflow
          last_workflow_id=$(echo $last_workflow | jq '.id')
          echo "The workflow id is [$last_workflow_id]."
          echo ""
          conclusion=$(echo $last_workflow | jq '.conclusion')
          status=$(echo $last_workflow | jq '.status')

          # while [[ $conclusion == "null" && $status != "\"completed\"" ]]
          # do
          #   echo "Sleeping for $wait_interval seconds"
          #   sleep $wait_interval
          #   workflow=$(curl -X GET "https://api.github.com/repos/$INPUT_OWNER/$INPUT_REPO/actions/workflows/$INPUT_WORKFLOW_FILE_NAME/runs" \
          #     -H 'Accept: application/vnd.github.v3+json' \
          #     -H "Authorization: Bearer $INPUT_GITHUB_TOKEN" #| jq '.workflow_runs[] | select(.id == '$last_workflow_id')')
          #   #conclusion=$(echo $workflow | jq '.conclusion')
          #   #status=$(echo $workflow | jq '.status')
          #   #echo "Checking conclusion [$conclusion]"
          #   #echo "Checking status [$status]"
          # done

          # if [[ $conclusion == "\"success\"" && $status == "\"completed\"" ]]
          # then
          #   echo "Yes, success"
          # else
          #   # Alternative "failure"
          #   echo "Conclusion is not success, its [$conclusion]."
          #   if [ "$propagate_failure" = true ]
          #   then
          #     echo "Propagating failure to upstream job"
          #     exit 1
          #   fi
          # fi
